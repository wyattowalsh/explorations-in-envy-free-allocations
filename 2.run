# This is the run file for problem 1 

# reset everything to start fresh
reset; 

option show_stats 1;
option display_1col 0; 
option solver_msg 1;
# declare set for which files are going to be read and parameters to hold variables of interest
set F = 1 .. 25;

var status binary;

model 2.mod;

data "./data/simple.dat"; 

solve;

if match(solve_message, "infeasible") > 0 then { 
		fix status := 0;
	} else {
		fix status := 1;
}

display status > ('./data/output/2_simple.txt');
display {p in P, i in I} precision(x[p,i],5) >>  ('./data/output/2_simple.txt');
display {p in P, i in I} precision(y[p,i],5) >>  ('./data/output/2_simple.txt');
display {p1 in P, p2 in P} precision(setValue[p1,p2],5)  >>  ('./data/output/2_simple.txt');
display {p1 in P, p2 in P} precision(setValueMinusOne[p1,p2],5)  >>  ('./data/output/2_simple.txt');
display {p1 in P, p2 in P} precision(pEnvyFree[p1,p2],5) >>  ('./data/output/2_simple.txt');
display z >> ('./data/output/2_simple.txt');

reset data;

data "./data/larger.dat";

solve;

if match(solve_message, "infeasible") > 0 then { 
		fix status := 0;
	} else {
		fix status := 1;
}

display status > ('./data/output/2_larger.txt');
display {p in P, i in I} precision(x[p,i],5) >>  ('./data/output/2_larger.txt');
display {p in P, i in I} precision(y[p,i],5) >>  ('./data/output/2_larger.txt');
display {p1 in P, p2 in P} precision(setValue[p1,p2],5)  >>  ('./data/output/2_larger.txt');
display {p1 in P, p2 in P} precision(setValueMinusOne[p1,p2],5)  >>  ('./data/output/2_larger.txt');
display {p1 in P, p2 in P} precision(pEnvyFree[p1,p2],5) >>  ('./data/output/2_larger.txt');
display z >> ('./data/output/2_larger.txt');

reset data; 
# # write header to file
# print 'pEnvyFree, totalSolveTime, solveTime, |I|, |P|, fileNumber' >  ('./data/output/1.txt');

# for {f in F} {
# 	data ("./data/generated/" & f & ".dat");
# 	# print("File: " & i & " begins here:") >>  '1.txt';
# 	solve;
# 	if match(solve_message, "infeasible") > 0 then { 
# 		print f & ' is infeasible';
# 		print 'NaN' & ', ' & precision(_total_solve_time,6) & ', ' & precision(_solve_time,6) & 
# 		', ' & (card(I)) & ', ' & (card(P)) & ', ' & f >> ('./data/output/2.txt');
# 		reset data;
# 		continue;
# 	}
# 	print precision(z,6) & ', ' & precision(_total_solve_time,6) & ', ' & precision(_solve_time,6) & 
# 		', ' & (card(I)) & ', ' & (card(P)) & ', ' & f >>  ('./data/output/2.txt');
# 	reset data;
# }

option show_stats 1;
option display_1col 0; 
option solver_msg 1;

